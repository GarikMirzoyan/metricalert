package metrics

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"os"
	"strconv"
	"sync"
	"time"

	dto "github.com/GarikMirzoyan/metricalert/internal/DTO"
	"github.com/GarikMirzoyan/metricalert/internal/constants"
	"github.com/GarikMirzoyan/metricalert/internal/models"
	serverConfig "github.com/GarikMirzoyan/metricalert/internal/server/config"
	"github.com/GarikMirzoyan/metricalert/internal/utils"
	"go.uber.org/zap"
)

type MemStorage struct {
	gauges   map[string]models.GaugeMetric
	counters map[string]models.CounterMetric
	mu       sync.Mutex
}

func NewMemStorage() *MemStorage {
	return &MemStorage{
		gauges:   make(map[string]models.GaugeMetric),
		counters: make(map[string]models.CounterMetric),
	}
}

func (ms *MemStorage) Update(metric models.Metric, ctx context.Context) error {
	switch m := metric.(type) {
	case *models.GaugeMetric:
		return ms.UpdateGauge(m, ctx)
	case *models.CounterMetric:
		return ms.UpdateCounter(m, ctx)
	default:
		return fmt.Errorf("invalid metric type")
	}
}

func (ms *MemStorage) UpdateJSON(metric models.Metric, ctx context.Context) (dto.Metrics, error) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ nil –∑–Ω–∞—á–µ–Ω–∏–µ
	if metric.GetValue() == nil {
		return dto.Metrics{}, ErrInvalidMetricDelta
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
	response := dto.Metrics{
		ID:    metric.GetName(),
		MType: string(metric.GetType()),
	}

	switch m := metric.(type) {
	case *models.GaugeMetric:
		if err := ms.UpdateGauge(m, ctx); err != nil {
			return dto.Metrics{}, fmt.Errorf("failed to update gauge: %w", err)
		}
		value, ok := metric.GetValue().(float64)
		if !ok {
			return dto.Metrics{}, fmt.Errorf("invalid type assertion: expected *float64")
		}
		response.Value = &value

	case *models.CounterMetric:
		if err := ms.UpdateCounter(m, ctx); err != nil {
			return dto.Metrics{}, fmt.Errorf("failed to update counter: %w", err)
		}
		delta, ok := metric.GetValue().(int64)
		if !ok {
			return dto.Metrics{}, fmt.Errorf("invalid type assertion: expected *int64")
		}
		response.Delta = &delta

	default:
		return dto.Metrics{}, ErrInvalidMetricType
	}

	return response, nil
}

func (ms *MemStorage) GetValue(metricType, metricName string, ctx context.Context) (string, error) {
	switch constants.MetricType(metricType) {
	case constants.GaugeName:
		metric, err := ms.GetGauge(metricName, ctx)
		if err != nil {
			return "", err
		}
		return utils.FormatNumber(metric.Value), nil

	case constants.CounterName:
		metric, err := ms.GetCounter(metricName, ctx)
		if err != nil {
			return "", err
		}
		return strconv.FormatInt(metric.Value, 10), nil

	default:
		return "", ErrInvalidMetricType
	}
}

func (ms *MemStorage) GetJSON(metric models.Metric, ctx context.Context) (dto.Metrics, error) {
	// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
	response := dto.Metrics{
		ID:    metric.GetName(),
		MType: string(metric.GetType()),
	}

	switch m := metric.(type) {
	case *models.GaugeMetric:
		metric, err := ms.GetGauge(m.GetName(), ctx)
		if err != nil {
			return dto.Metrics{}, err
		}

		value, ok := metric.GetValue().(float64)

		if !ok {
			return dto.Metrics{}, fmt.Errorf("invalid type assertion: expected *float64")
		}

		response.Value = &value

		return response, nil

	case *models.CounterMetric:
		metric, err := ms.GetCounter(m.GetName(), ctx)

		if err != nil {
			return dto.Metrics{}, err
		}

		delta, ok := metric.GetValue().(int64)

		if !ok {
			return dto.Metrics{}, fmt.Errorf("invalid type assertion: expected *int64")
		}
		response.Delta = &delta

		return response, nil
	default:
		return dto.Metrics{}, ErrInvalidMetricType
	}
}

func (ms *MemStorage) UpdateGauge(metric *models.GaugeMetric, ctx context.Context) error {
	if metric.Name == "" {
		return fmt.Errorf("metric name is empty")
	}

	ms.mu.Lock()
	defer ms.mu.Unlock()

	ms.gauges[metric.Name] = *metric
	return nil
}

func (ms *MemStorage) UpdateCounter(metric *models.CounterMetric, ctx context.Context) error {
	if metric.Name == "" {
		return fmt.Errorf("metric name is empty")
	}

	ms.mu.Lock()
	defer ms.mu.Unlock()

	if existing, exists := ms.counters[metric.Name]; exists {
		metric.Value += existing.Value
	}
	ms.counters[metric.Name] = *metric
	return nil
}

func (ms *MemStorage) GetGauge(name string, ctx context.Context) (models.GaugeMetric, error) {
	metric, exists := ms.gauges[name]
	if !exists {
		return models.GaugeMetric{}, ErrMetricNotFound
	}
	return metric, nil
}

func (ms *MemStorage) GetCounter(name string, ctx context.Context) (models.CounterMetric, error) {
	metric, exists := ms.counters[name]
	if !exists {
		return models.CounterMetric{}, ErrMetricNotFound
	}
	return metric, nil
}

func (ms *MemStorage) GetAll(ctx context.Context) (map[string]models.GaugeMetric, map[string]models.CounterMetric, error) {
	ms.mu.Lock()
	defer ms.mu.Unlock()

	gauges := make(map[string]models.GaugeMetric)
	counters := make(map[string]models.CounterMetric)

	for name, metric := range ms.gauges {
		gauges[name] = metric
	}

	for name, metric := range ms.counters {
		counters[name] = metric
	}

	return gauges, counters, nil
}

func (ms *MemStorage) UpdateBatchJSON(metrics map[string]models.Metric, ctx context.Context) (map[string]dto.Metrics, error) {
	responses := make(map[string]dto.Metrics)

	for key, metric := range metrics {
		if key == "" {
			return nil, ErrInvalidMetricID
		}

		response := dto.Metrics{
			ID:    key,
			MType: string(metric.GetType()),
		}

		switch m := metric.(type) {
		case *models.GaugeMetric:
			ms.UpdateGauge(m, ctx)
			response.Value = &m.Value
		case *models.CounterMetric:
			ms.UpdateCounter(m, ctx)
			response.Delta = &m.Value
		default:
			return nil, ErrInvalidMetricType
		}

		responses[key] = response
	}

	return responses, nil
}

func (ms *MemStorage) LoadMetricsFromFile(config serverConfig.Config) error {
	if !config.Restore {
		return nil
	}

	file, err := os.Open(config.FileStoragePath)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: %w", err)
	}
	defer file.Close()

	decoder := json.NewDecoder(file)
	ctx := context.Background()

	for {
		var metricDTO dto.Metrics
		if err := decoder.Decode(&metricDTO); err != nil {
			if errors.Is(err, io.EOF) {
				break // –≤—Å—ë —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
			}
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: %w", err)
		}

		switch constants.MetricType(metricDTO.MType) {
		case constants.GaugeName:
			if metricDTO.Value != nil {
				metric := &models.GaugeMetric{
					Name:  metricDTO.ID,
					Type:  constants.GaugeName,
					Value: *metricDTO.Value,
				}
				if err := ms.UpdateGauge(metric, ctx); err != nil {
					return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ gauge –º–µ—Ç—Ä–∏–∫–∏: %w", err)
				}
			}

		case constants.CounterName:
			if metricDTO.Delta != nil {
				metric := &models.CounterMetric{
					Name:  metricDTO.ID,
					Type:  constants.CounterName,
					Value: *metricDTO.Delta,
				}
				if err := ms.UpdateCounter(metric, ctx); err != nil {
					return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ counter –º–µ—Ç—Ä–∏–∫–∏: %w", err)
				}
			}

		default:
			return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Ç—Ä–∏–∫–∏: %s", metricDTO.MType)
		}
	}

	return nil
}

func (ms *MemStorage) SaveMetricsToFile(config serverConfig.Config) error {
	ms.mu.Lock()
	defer ms.mu.Unlock()

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	file, err := os.Create(config.FileStoragePath)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫: %w", err)
	}
	defer file.Close()

	encoder := json.NewEncoder(file)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ Gauge
	for name, gauge := range ms.gauges {
		metric := dto.Metrics{
			ID:    name,
			MType: string(constants.GaugeName),
			Value: &gauge.Value,
		}
		if err := encoder.Encode(metric); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫–∏ %s –≤ —Ñ–∞–π–ª: %w", name, err)
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ Counter
	for name, counter := range ms.counters {
		metric := dto.Metrics{
			ID:    name,
			MType: string(constants.CounterName),
			Delta: &counter.Value,
		}
		if err := encoder.Encode(metric); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫–∏ %s –≤ —Ñ–∞–π–ª: %w", name, err)
		}
	}

	return nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
func (ms *MemStorage) StartMetricSaving(config serverConfig.Config, logger *zap.Logger) {
	if config.StoreInterval == 0 {
		// üîÅ –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
		if err := ms.SaveMetricsToFile(config); err != nil {
			logger.Error("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫", zap.Error(err))
		}
		return
	}

	ticker := time.NewTicker(config.StoreInterval)
	defer ticker.Stop()

	logger.Info("–∑–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫", zap.Duration("interval", config.StoreInterval))

	for range ticker.C {
		if err := ms.SaveMetricsToFile(config); err != nil {
			logger.Error("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫", zap.Error(err))
		}
	}
}
