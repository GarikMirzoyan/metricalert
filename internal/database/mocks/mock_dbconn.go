// Code generated by MockGen. DO NOT EDIT.
// Source: internal/database/dbconn.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBConn is a mock of DBConn interface.
type MockDBConn struct {
	ctrl     *gomock.Controller
	recorder *MockDBConnMockRecorder
}

// MockDBConnMockRecorder is the mock recorder for MockDBConn.
type MockDBConnMockRecorder struct {
	mock *MockDBConn
}

// NewMockDBConn creates a new mock instance.
func NewMockDBConn(ctrl *gomock.Controller) *MockDBConn {
	mock := &MockDBConn{ctrl: ctrl}
	mock.recorder = &MockDBConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConn) EXPECT() *MockDBConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDBConn) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDBConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBConn)(nil).Close))
}

// Ping mocks base method.
func (m *MockDBConn) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDBConnMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDBConn)(nil).Ping), ctx)
}
